# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Test and Deploy

on:
  - push
  - pull_request

env:
  TWILIO_APP_NAME: onebusaway-twilio-webapp
  TWILIO_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-twilio-webapp
  SERVER_PORT: 8080
  LOCATION: 'Australia East'

jobs:
  build_and_test:
    runs-on: ubuntu-latest
#    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    permissions:
      contents: write
      packages: write

    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Tools
        run: sudo apt-get install xmlstarlet

      - name: Get Project Version and Branch
        run: |
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(xmlstarlet sel -t -m _:project -m _:properties -v _:project-version pom.xml)" >> $GITHUB_ENV
          echo "TAG_VERSION=$(git tag -l $PROJECT_VERSION)" >> $GITHUB_ENV

      - name: Version Check
        if: env.TAG_VERSION == env.PROJECT_VERSION
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a tag with current project version already exists! Please update the project version in pom.xml.')

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          server-id: github
          tings-path: ${{ github.WORKSPACE }}
          distribution: temurin
          cache: maven

      - name: Build with Maven
        run: mvn package -Ptravis -Dmaven.javadoc.skip=true -DskipTests -Dvalidate.silent=true -Dlog4j.configuration= -B -V -q

      - name: Set Image Tag
        run: |
          if [[ "${{ env.GIT_BRANCH }}" == "master" ]]; then
            echo "IMAGE_TAG=${{ env.PROJECT_VERSION }}" >> $GITHUB_ENV
          fi
          
          if [[ "${{ env.GIT_BRANCH }}" != "master" ]]; then
            echo "IMAGE_TAG=${{ env.PROJECT_VERSION }}-dev" >> $GITHUB_ENV
          fi

      - id: set_image_tag
        run: |
          echo "::set-output name=image_tag::${{ env.IMAGE_TAG }}"
          echo "::set-output name=project_version::${{ env.PROJECT_VERSION }}"

      - name: Azure Login
#        if: github.event_name != 'pull_request'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login [Azure]
#        if: github.event_name != 'pull_request'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker Build - onebusaway-twilio-webapp
#        if: github.event_name != 'pull_request'
        run: |
          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./onebusaway-twilio-webapp

      - name: Docker Tag - onebusaway-twilio-webapp
        if: github.event_name != 'pull_request'
#        if: github.ref == 'refs/heads/master'
        run: |
          docker tag ${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker Push - onebusaway-twilio-webapp
        if: github.event_name != 'pull_request'
#        if: github.ref == 'refs/heads/master'
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Create Tag
        if: github.ref == 'refs/heads/master'
        uses: actions/github-script@v6
        with:
          script: |
            const { PROJECT_VERSION } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${PROJECT_VERSION}`,
              sha: context.sha
            })

      - name: Create release
        if: github.ref == 'refs/heads/master'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { PROJECT_VERSION } = process.env
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: `v${PROJECT_VERSION}`,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: `${PROJECT_VERSION}`,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  deploy_to_dev:
    if: github.event_name != 'pull_request'
#    if: github.ref == 'refs/heads/master'
    needs: build_and_test

    runs-on: ubuntu-latest

    steps:
      - name: Set Environment Variables
        run: |
          echo "IMAGE_TAG=${{ needs.build_and_test.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Twilio Webapp to Azure Container Instances
        if: github.ref != 'refs/heads/master'
        uses: azure/aci-deploy@v1.1.3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ env.TWILIO_APP_NAME }}-dev
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: ${{ env.TWILIO_APP_NAME }}-dev
          ports: ${{ env.SERVER_PORT }}
          environment-variables: >
            SERVER_PORT=${{ env.SERVER_PORT }}
            AZURE_COGNITIVE_SERVICE_URL=${{ secrets.AZURE_COGNITIVE_SERVICE_URL }}
            TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}
            DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}
            DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}
            DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}
          location: ${{ env.LOCATION }}
          cpu: 1
          memory: 1

#      - name: Deploy Twilio Webapp to Containers App
#        if: github.ref == 'refs/heads/master'
#        uses: azure/CLI@v1
#        with:
#          inlineScript: |
#            az config set extension.use_dynamic_install=yes_without_prompt
#            az containerapp registry set -n ${{ env.TWILIO_APP_NAME }} -g ${{ secrets.RESOURCE_GROUP }} --server ${{ secrets.REGISTRY_LOGIN_SERVER }} --username  ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }}
#            az containerapp update -n ${{ env.TWILIO_APP_NAME }} -g ${{ secrets.RESOURCE_GROUP }} --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_IMAGE_NAME }}:${{ env.IMAGE_TAG }} --set-env-vars "SERVER_PORT=${{ env.SERVER_PORT }}" "AZURE_COGNITIVE_SERVICE_URL=${{ secrets.AZURE_COGNITIVE_SERVICE_URL }}" "TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}" "DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}" "DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}" "DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}" "DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}" "DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}"

