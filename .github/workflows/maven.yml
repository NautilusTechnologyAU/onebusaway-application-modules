# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Test and Deploy

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'

env:
  TWILIO_PHONE_APP_NAME: onebusaway-twilio-webapp
  TWILIO_PHONE_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-twilio-webapp
  TWILIO_SMS_APP_NAME: onebusaway-sms-webapp
  TWILIO_SMS_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-sms-webapp
  ADMIN_APP_NAME: onebusaway-admin-webapp
  ADMIN_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-admin-webapp
  ENTERPRISE_APP_NAME: onebusaway-enterprise-acta-webapp
  ENTERPRISE_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-enterprise-acta-webapp
  COMBINED_APP_NAME: onebusaway-combined-webapps
  COMBINED_IMAGE_NAME: nautilustechnologyau/transit/onebusaway-combined-webapps
  SERVER_PORT: 8080
  LOCATION: 'Australia East'
  TIME_ZONE: 'Australia/Adelaide'

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Tools
        run: sudo apt-get install xmlstarlet

      - name: Get Project Version and Branch
        run: |
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(xmlstarlet sel -t -m _:project -m _:properties -v _:project-version pom.xml)" >> $GITHUB_ENV

      - name: Get Tag with Project Version
        run: |
          git fetch --all --tags
          echo "TAG_VERSION=$(git tag -l $PROJECT_VERSION)" >> $GITHUB_ENV

      - name: Version Check
        run: |
          if [[ "${{ env.TAG_VERSION }}" == "${{ env.PROJECT_VERSION }}" ]]; then
            echo "There is a tag with ${{ env.PROJECT_VERSION }} already exists! Please update the project version in pom.xml."
            exit 1
          fi

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          server-id: github
          tings-path: ${{ github.WORKSPACE }}
          distribution: temurin
          cache: maven

      - name: Build with Maven
        run: mvn package -Ptravis -Dmaven.javadoc.skip=true -DskipTests -Dvalidate.silent=true -Dlog4j.configuration= -B -V -q

      - name: Set Image Tag
        run: |
          if [[ "${{ env.GIT_BRANCH }}" == "master" ]]; then
            echo "IMAGE_TAG=${{ env.PROJECT_VERSION }}" >> $GITHUB_ENV
          fi
          
          if [[ "${{ env.GIT_BRANCH }}" != "master" ]]; then
            echo "IMAGE_TAG=${{ env.PROJECT_VERSION }}-dev" >> $GITHUB_ENV
          fi

      - id: set_image_tag
        run: |
          echo "::set-output name=image_tag::${{ env.IMAGE_TAG }}"
          echo "::set-output name=project_version::${{ env.PROJECT_VERSION }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login [Azure]
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker Build and Push - onebusaway-twilio-webapp
        if: github.event_name != 'pull_request'
        run: |
          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.TWILIO_PHONE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./onebusaway-twilio-webapp
          docker tag ${{ env.TWILIO_PHONE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_PHONE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_PHONE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker Build and Push - onebusaway-sms-webapp
        if: github.event_name != 'pull_request'
        run: |
          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.TWILIO_SMS_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./onebusaway-sms-webapp
          docker tag ${{ env.TWILIO_SMS_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_SMS_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_SMS_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#      - name: Docker Build and Push - onebusaway-admin-webapp
#        if: github.event_name != 'pull_request'
#        run: |
#          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.ADMIN_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./onebusaway-admin-webapp
#          docker tag ${{ env.ADMIN_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ADMIN_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ADMIN_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker Build and Push - onebusaway-enterprise-acta-webapp
        if: github.event_name != 'pull_request'
        run: |
          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.ENTERPRISE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./onebusaway-enterprise-acta-webapp
          docker tag ${{ env.ENTERPRISE_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ENTERPRISE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ENTERPRISE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker Build and Push - onebusaway-combined-webapps
        if: github.event_name != 'pull_request'
        run: |
          docker build --build-arg VERSION=${{ env.IMAGE_TAG }} -t ${{ env.COMBINED_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./
          docker tag ${{ env.COMBINED_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Create Tag
        if: github.ref == 'refs/heads/master'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.CICD_TOKEN }}
          script: |
            const { PROJECT_VERSION } = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${PROJECT_VERSION}`,
              sha: context.sha
            })

      - name: Create release
        if: github.ref == 'refs/heads/master'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { PROJECT_VERSION } = process.env
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: `v${PROJECT_VERSION}`,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: `${PROJECT_VERSION}`,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  deploy_to_dev:
#    if: github.event_name != 'pull_request'
    if: github.event_name == 'something-else'
    needs: build_and_test

    runs-on: ubuntu-latest

    steps:
      - name: Set Environment Variables
        run: |
          echo "IMAGE_TAG=${{ needs.build_and_test.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Twilio Phone Webapp to Azure Container Instances
        if: github.ref != 'refs/heads/master'
        uses: azure/aci-deploy@v1.1.3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ env.TWILIO_PHONE_APP_NAME }}-dev
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_PHONE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: ${{ env.TWILIO_PHONE_APP_NAME }}-dev
          ports: ${{ env.SERVER_PORT }}
          environment-variables: >
            TZ=${{ env.TIME_ZONE }}
            SERVER_PORT=${{ env.SERVER_PORT }}
            AZURE_COGNITIVE_SERVICE_URL=${{ secrets.AZURE_COGNITIVE_SERVICE_URL }}
            TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}
            DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}
            DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}
          secure-environment-variables: >
            DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}

          location: ${{ env.LOCATION }}
          cpu: 1
          memory: 1

      - name: Deploy Twilio SMS Webapp to Azure Container Instances
        if: github.ref != 'refs/heads/master'
        uses: azure/aci-deploy@v1.1.3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ env.TWILIO_SMS_APP_NAME }}-dev
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.TWILIO_SMS_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: ${{ env.TWILIO_SMS_APP_NAME }}-dev
          ports: ${{ env.SERVER_PORT }}
          environment-variables: >
            TZ=${{ env.TIME_ZONE }}
            SERVER_PORT=${{ env.SERVER_PORT }}
            TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}
            DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}
            DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}
          secure-environment-variables: >
            DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}
          location: ${{ env.LOCATION }}
          cpu: 1
          memory: 1

#      - name: Deploy Admin Webapp to Azure Container Instances
#        if: github.ref != 'refs/heads/master'
#        uses: azure/aci-deploy@v1.1.3
#        with:
#          resource-group: ${{ secrets.RESOURCE_GROUP }}
#          dns-name-label: ${{ env.ADMIN_APP_NAME }}-dev
#          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ADMIN_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#          registry-username: ${{ secrets.REGISTRY_USERNAME }}
#          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#          name: ${{ env.ADMIN_APP_NAME }}-dev
#          ports: ${{ env.SERVER_PORT }}
#          environment-variables: >
#            TZ=${{ env.TIME_ZONE }}
#            SERVER_PORT=${{ env.SERVER_PORT }}
#            TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}
#            DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}
#            DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}
#            DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}
#            DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}
#            SERVER_URL=http://${{ env.ADMIN_APP_NAME }}-dev.australiaeast.azurecontainer.io:${{ env.SERVER_PORT }}
#          secure-environment-variables: >
#            ADMIN_PASSWORD=${{ secrets.TRANSIT_ADMIN_PASSWORD }}
#            OPERATOR_PASSWORD=${{ secrets.TRANSIT_OPERATOR_PASSWORD }}
#            DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}
#            GOOGLE_MAPS_API_KEY=${{ secrets.TRANSIT_GOOGLE_MAPS_API_KEY }}
#            GOOGLE_GEOCODE_API_KEY=${{ secrets.TRANSIT_GOOGLE_GEOCODE_API_KEY }}
#          location: ${{ env.LOCATION }}
#          cpu: 1
#          memory: 1

      - name: Deploy Enterprise Webapp to Azure Container Instances
        if: github.ref != 'refs/heads/master'
        uses: azure/aci-deploy@v1.1.3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ env.ENTERPRISE_APP_NAME }}-dev
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ENTERPRISE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: ${{ env.ENTERPRISE_APP_NAME }}-dev
          ports: ${{ env.SERVER_PORT }}
          environment-variables: >
            TZ=${{ env.TIME_ZONE }}
            SERVER_PORT=${{ env.SERVER_PORT }}
            TRANSIT_DATA_SERVICE_URL=${{ secrets.TRANSIT_DATA_SERVICE_URL }}
            DATABASE_HOST=${{ secrets.TRANSIT_DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.TRANSIT_DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.TRANSIT_DATABASE_NAME }}
            DATABASE_USER=${{ secrets.TRANSIT_DATABASE_USER }}
            SIRI_BASE_URL=${{ secrets.TRANSIT_SIRI_BASE_URL }}
            API_BASE_URL=${{ secrets.TRANSIT_API_BASE_URL }}
            API_KEY=${{ secrets.TRANSIT_API_KEY }}
            XWIKI_URL=${{ secrets.TRANSIT_XWIKI_URL }}
          secure-environment-variables: >
            DATABASE_PASSWORD=${{ secrets.TRANSIT_DATABASE_PASSWORD }}
            GOOGLE_MAPS_API_KEY=${{ secrets.TRANSIT_GOOGLE_MAPS_API_KEY }}
            GOOGLE_GEOCODE_API_KEY=${{ secrets.TRANSIT_GOOGLE_GEOCODE_API_KEY }}
            XWIKI_USERNAME=${{ secrets.TRANSIT_XWIKI_USERNAME }}
            XWIKI_PASSWORD=${{ secrets.TRANSIT_XWIKI_PASSWORD }}
          location: ${{ env.LOCATION }}
          cpu: 1
          memory: 1
